
switchledmotorrelayinterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000152  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d5  00000000  00000000  000002e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001fa  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f1  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000006c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000745  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
void main()
{
  92:	1a ba       	out	0x1a, r1	; 26
  DDRA=0X00;
  DDRD=0XFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 bb       	out	0x11, r24	; 17
  PORTC=0XFF;
  98:	85 bb       	out	0x15, r24	; 21
  DDRB=0XFF;
  9a:	87 bb       	out	0x17, r24	; 23
  PORTA=(1<<PA6);
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	8b bb       	out	0x1b, r24	; 27
  PORTA=(1<<PA7);
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	8b bb       	out	0x1b, r24	; 27
  PORTA=(1<<PA5);
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	8b bb       	out	0x1b, r24	; 27

  while(1)
    {   
	      if((PINA & 0b11100000)==0b01100000)
		  {
		      PORTD=0b10101010;
  a8:	7a ea       	ldi	r23, 0xAA	; 170
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	28 ec       	ldi	r18, 0xC8	; 200
  ac:	30 e0       	ldi	r19, 0x00	; 0
			  _delay_ms(100);
			  PORTD=0b01010101;
  ae:	65 e5       	ldi	r22, 0x55	; 85
			  else 
			    PORTD=0X00;


            if((PINA & 0b11100000)==0b10100000)
          		{	    PORTC=(1<<PC7);
  b0:	50 e8       	ldi	r21, 0x80	; 128
                          else
						  PORTC=0X00;

              if((PINA & 0b11100000)==0b11000000)
			       {      
				           PORTB=0b10100000;
  b2:	40 ea       	ldi	r20, 0xA0	; 160
  PORTA=(1<<PA7);
  PORTA=(1<<PA5);

  while(1)
    {   
	      if((PINA & 0b11100000)==0b01100000)
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	80 7e       	andi	r24, 0xE0	; 224
  b8:	80 36       	cpi	r24, 0x60	; 96
  ba:	89 f4       	brne	.+34     	; 0xde <main+0x4c>
		  {
		      PORTD=0b10101010;
  bc:	72 bb       	out	0x12, r23	; 18
  be:	88 ee       	ldi	r24, 0xE8	; 232
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	f9 01       	movw	r30, r18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d9 f7       	brne	.-10     	; 0xc2 <main+0x30>
			  _delay_ms(100);
			  PORTD=0b01010101;
  cc:	62 bb       	out	0x12, r22	; 18
  ce:	88 ee       	ldi	r24, 0xE8	; 232
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  da:	d9 f7       	brne	.-10     	; 0xd2 <main+0x40>
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x4e>
			  _delay_ms(100);
			  }
			  else 
			    PORTD=0X00;
  de:	12 ba       	out	0x12, r1	; 18


            if((PINA & 0b11100000)==0b10100000)
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	80 7e       	andi	r24, 0xE0	; 224
  e4:	80 3a       	cpi	r24, 0xA0	; 160
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x5a>
          		{	    PORTC=(1<<PC7);
  e8:	55 bb       	out	0x15, r21	; 21
  ea:	01 c0       	rjmp	.+2      	; 0xee <main+0x5c>
                       }
                          else
						  PORTC=0X00;
  ec:	15 ba       	out	0x15, r1	; 21

              if((PINA & 0b11100000)==0b11000000)
  ee:	89 b3       	in	r24, 0x19	; 25
  f0:	80 7e       	andi	r24, 0xE0	; 224
  f2:	80 3c       	cpi	r24, 0xC0	; 192
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x68>
			       {      
				           PORTB=0b10100000;
  f6:	48 bb       	out	0x18, r20	; 24
  f8:	dd cf       	rjmp	.-70     	; 0xb4 <main+0x22>
						   }

                            else
							PORTB=0X00;
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	db cf       	rjmp	.-74     	; 0xb4 <main+0x22>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
